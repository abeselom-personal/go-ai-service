// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/provider_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/provider_repository.go -destination=internal/repository/mocks/mock_provider_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/abeselom-personal/go-ai-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderRepository is a mock of ProviderRepository interface.
type MockProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProviderRepositoryMockRecorder
	isgomock struct{}
}

// MockProviderRepositoryMockRecorder is the mock recorder for MockProviderRepository.
type MockProviderRepositoryMockRecorder struct {
	mock *MockProviderRepository
}

// NewMockProviderRepository creates a new mock instance.
func NewMockProviderRepository(ctrl *gomock.Controller) *MockProviderRepository {
	mock := &MockProviderRepository{ctrl: ctrl}
	mock.recorder = &MockProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderRepository) EXPECT() *MockProviderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProviderRepository) Create(ctx context.Context, provider *model.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProviderRepositoryMockRecorder) Create(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProviderRepository)(nil).Create), ctx, provider)
}

// Delete mocks base method.
func (m *MockProviderRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProviderRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockProviderRepository) GetByID(ctx context.Context, id string) (*model.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProviderRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProviderRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockProviderRepository) GetByName(ctx context.Context, name string) (*model.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProviderRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProviderRepository)(nil).GetByName), ctx, name)
}

// ListAll mocks base method.
func (m *MockProviderRepository) ListAll(ctx context.Context) ([]model.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]model.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockProviderRepositoryMockRecorder) ListAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockProviderRepository)(nil).ListAll), ctx)
}

// Update mocks base method.
func (m *MockProviderRepository) Update(ctx context.Context, provider *model.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProviderRepositoryMockRecorder) Update(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProviderRepository)(nil).Update), ctx, provider)
}

// WithTransaction mocks base method.
func (m *MockProviderRepository) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockProviderRepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockProviderRepository)(nil).WithTransaction), ctx, fn)
}
